from __future__ import annotations
from typing import Type, Union, Optional, BinaryIO, Tuple
import os

class PageSize:
    def __init__(self, width: float = 0.0, height: float = 0.0) -> None: ...
    def __getitem__(self, index: int) -> float: ...
    def landscape(self) -> PageSize: ...
    def portrait(self) -> PageSize: ...
    width: float = ...
    height: float = ...

PAGE_SIZE_NONE: PageSize = ...
PAGE_SIZE_LETTER: PageSize = ...
PAGE_SIZE_LEGAL: PageSize = ...
PAGE_SIZE_LEDGER: PageSize = ...

PAGE_SIZE_A3: PageSize = ...
PAGE_SIZE_A4: PageSize = ...
PAGE_SIZE_A5: PageSize = ...
PAGE_SIZE_B4: PageSize = ...
PAGE_SIZE_B5: PageSize = ...

class PageMargins:
    def __init__(self, top: float = 0.0, right: float = 0.0, bottom: float = 0.0, left: float = 0.0) -> None: ...
    def __getitem__(self, index: int) -> float: ...
    top: float = ...
    right: float = ...
    bottom: float = ...
    left: float = ...

PAGE_MARGINS_NONE: PageMargins = ...
PAGE_MARGINS_NORMAL: PageMargins = ...
PAGE_MARGINS_NARROW: PageMargins = ...
PAGE_MARGINS_MODERATE: PageMargins = ...

class MediaType:
    pass

MEDIA_TYPE_PRINT: MediaType = ...
MEDIA_TYPE_SCREEN: MediaType = ...

class PDFMetadata:
    pass

PDF_METADATA_TITLE: PDFMetadata = ...
PDF_METADATA_AUTHOR: PDFMetadata = ...
PDF_METADATA_SUBJECT: PDFMetadata = ...
PDF_METADATA_KEYWORDS: PDFMetadata = ...
PDF_METADATA_CREATOR: PDFMetadata = ...
PDF_METADATA_CREATION_DATE: PDFMetadata = ...
PDF_METADATA_MODIFICATION_DATE: PDFMetadata = ...

class ImageFormat:
    pass

IMAGE_FORMAT_INVALID: ImageFormat = ...
IMAGE_FORMAT_ARGB32: ImageFormat = ...
IMAGE_FORMAT_RGB24: ImageFormat = ...
IMAGE_FORMAT_A8: ImageFormat = ...
IMAGE_FORMAT_A1: ImageFormat = ...

class Canvas:
    def __enter__(self) -> Type[Canvas]: ...
    def __exit__(self, *exc_info) -> None: ...
    def flush(self) -> None: ...
    def finish(self) -> None: ...
    def translate(self, tx: float, ty: float) -> None: ...
    def scale(self, sx: float, sy: float) -> None: ...
    def rotate(self, angle: float) -> None: ...
    def transform(self, a: float, b: float, c: float, d: float, e: float, f: float) -> None: ...
    def set_matrix(self, a: float, b: float, c: float, d: float, e: float, f: float) -> None: ...
    def reset_matrix(self) -> None: ...
    def clip_rect(self, x: float, y: float, width: float, height: float) -> None: ...
    def clear_surface(self, red: float, green: float, blue: float, alpha: float = 1.0) -> None: ...
    def save_state(self) -> None: ...
    def restore_state(self) -> None: ...

class ImageCanvas(Canvas):
    def __init__(self, width: int, height: int, format: ImageFormat = IMAGE_FORMAT_ARGB32) -> None: ...
    @classmethod
    def create_for_data(cls, data: memoryview, width: int, height: int, stride: int, format: ImageFormat = IMAGE_FORMAT_ARGB32) -> ImageCanvas: ...
    def get_data(self) -> memoryview: ...
    def get_width(self) -> int: ...
    def get_height(self) -> int: ...
    def get_stride(self) -> int: ...
    def get_format(self) -> ImageFormat: ...
    def write_to_png(self, path: Union[str, bytes, os.PathLike]) -> None: ...
    def write_to_png_stream(self, stream: BinaryIO) -> None: ...

class PDFCanvas(Canvas):
    def __init__(self, path: Union[str, bytes, os.PathLike], size: PageSize) -> None: ...
    @classmethod
    def create_for_stream(cls, stream: BinaryIO, size: PageSize) -> PDFCanvas: ...
    def set_metadata(self, metadata: PDFMetadata, value: str) -> None: ...
    def set_size(self, size: PageSize) -> None: ...
    def show_page(self) -> None: ...

MIN_PAGE_COUNT: int = ...
MAX_PAGE_COUNT: int = ...

class Book:
    def __init__(self, size: PageSize = PAGE_SIZE_A4, margins: PageMargins = PAGE_MARGINS_NORMAL, media: MediaType = MEDIA_TYPE_PRINT) -> None: ...
    def get_viewport_width(self) -> float: ...
    def get_viewport_height(self) -> float: ...
    def get_document_width(self) -> float: ...
    def get_document_height(self) -> float: ...
    def get_page_count(self) -> int: ...
    def get_page_size(self) -> PageSize: ...
    def get_page_size_at(self, page_index: int) -> PageSize: ...
    def get_page_margins(self) -> PageMargins: ...
    def get_media_type(self) -> MediaType: ...
    def set_metadata(self, metadata: PDFMetadata, value: str) -> None: ...
    def get_metadata(self, metadata: PDFMetadata) -> str: ...
    def load_url(self, url: str, user_style: str = ..., user_script: str = ...) -> None: ...
    def load_data(self, data: Union[str, bytes], mime_type: str = ..., text_encoding: str = ..., user_style: str = ..., user_script: str = ..., base_url: str = ...) -> None: ...
    def load_image(self, data: Union[str, bytes], mime_type: str = ..., text_encoding: str = ..., user_style: str = ..., user_script: str = ..., base_url: str = ...) -> None: ...
    def load_xml(self, data: str, user_style: str = ..., user_script: str = ..., base_url: str = ...) -> None: ...
    def load_html(self, data: str, user_style: str = ..., user_script: str = ..., base_url: str = ...) -> None: ...
    def render_page(self, canvas: Canvas, page_index: int) -> None: ...
    def render_document(self, canvas: Canvas, rect: Tuple[float, float, float, float] = ...) -> None: ...
    def write_to_pdf(self, path: Union[str, bytes, os.PathLike], from_page: int = MIN_PAGE_COUNT, to_page: int = MAX_PAGE_COUNT, page_step: int = 1) -> None: ...
    def write_to_pdf_stream(self, stream: BinaryIO, from_page: int = MIN_PAGE_COUNT, to_page: int = MAX_PAGE_COUNT, page_step: int = 1) -> None: ...
    def write_to_png(self, path: Union[str, bytes, os.PathLike], format: ImageFormat = IMAGE_FORMAT_ARGB32) -> None: ...
    def write_to_png_stream(self, stream: BinaryIO, format: ImageFormat = IMAGE_FORMAT_ARGB32) -> None: ...

class ResourceData:
    def __init__(self, content: Union[str, bytes], mime_type: str = ..., text_encoding: str = ...) -> None: ...
    def get_content(self) -> memoryview: ...
    def get_mime_type(self) -> str: ...
    def get_text_encoding(self) -> str: ...

class ResourceFetcher:
    def load_url(self, url: str) -> ResourceData: ...

class ResourceLoader:
    default_fetcher: ResourceFetcher = ...
    custom_fetcher: Optional[ResourceFetcher] = None

resource_loader: ResourceLoader = ...

UNITS_PT: float = ...
UNITS_PC: float = ...
UNITS_IN: float = ...
UNITS_CM: float = ...
UNITS_MM: float = ...
UNITS_PX: float = ...

PLUTOBOOK_VERSION: int = ...
PLUTOBOOK_VERSION_MINOR: int = ...
PLUTOBOOK_VERSION_MICRO: int = ...
PLUTOBOOK_VERSION_MAJOR: int = ...
PLUTOBOOK_VERSION_STRING: str = ...

version: str = ...
version_info: Tuple[float, float, float] = ...
